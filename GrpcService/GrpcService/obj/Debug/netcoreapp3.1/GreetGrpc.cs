// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcService {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Greeter
  {
    static readonly string __ServiceName = "hi.Greeter";

    static readonly grpc::Marshaller<global::GrpcService.PntInfoRequest> __Marshaller_hi_PntInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService.PntInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcService.PntInfoResponce> __Marshaller_hi_PntInfoResponce = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService.PntInfoResponce.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcService.Pntname> __Marshaller_hi_Pntname = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService.Pntname.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcService.SaveCheck> __Marshaller_hi_SaveCheck = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService.SaveCheck.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcService.UpdateCheck> __Marshaller_hi_UpdateCheck = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService.UpdateCheck.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcService.DeleteCheck> __Marshaller_hi_DeleteCheck = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService.DeleteCheck.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcService.PntInfoRequest, global::GrpcService.PntInfoResponce> __Method_GetPatientInfoByPntID = new grpc::Method<global::GrpcService.PntInfoRequest, global::GrpcService.PntInfoResponce>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPatientInfoByPntID",
        __Marshaller_hi_PntInfoRequest,
        __Marshaller_hi_PntInfoResponce);

    static readonly grpc::Method<global::GrpcService.Pntname, global::GrpcService.PntInfoResponce> __Method_GetPatientInfoByPntName = new grpc::Method<global::GrpcService.Pntname, global::GrpcService.PntInfoResponce>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPatientInfoByPntName",
        __Marshaller_hi_Pntname,
        __Marshaller_hi_PntInfoResponce);

    static readonly grpc::Method<global::GrpcService.PntInfoResponce, global::GrpcService.SaveCheck> __Method_SavePatientInfo = new grpc::Method<global::GrpcService.PntInfoResponce, global::GrpcService.SaveCheck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SavePatientInfo",
        __Marshaller_hi_PntInfoResponce,
        __Marshaller_hi_SaveCheck);

    static readonly grpc::Method<global::GrpcService.PntInfoResponce, global::GrpcService.UpdateCheck> __Method_UpdatePatientInfo = new grpc::Method<global::GrpcService.PntInfoResponce, global::GrpcService.UpdateCheck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePatientInfo",
        __Marshaller_hi_PntInfoResponce,
        __Marshaller_hi_UpdateCheck);

    static readonly grpc::Method<global::GrpcService.PntInfoRequest, global::GrpcService.DeleteCheck> __Method_DeletePatientInfo = new grpc::Method<global::GrpcService.PntInfoRequest, global::GrpcService.DeleteCheck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePatientInfo",
        __Marshaller_hi_PntInfoRequest,
        __Marshaller_hi_DeleteCheck);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcService.GreetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    [grpc::BindServiceMethod(typeof(Greeter), "BindService")]
    public abstract partial class GreeterBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcService.PntInfoResponce> GetPatientInfoByPntID(global::GrpcService.PntInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcService.PntInfoResponce> GetPatientInfoByPntName(global::GrpcService.Pntname request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcService.SaveCheck> SavePatientInfo(global::GrpcService.PntInfoResponce request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcService.UpdateCheck> UpdatePatientInfo(global::GrpcService.PntInfoResponce request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcService.DeleteCheck> DeletePatientInfo(global::GrpcService.PntInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Greeter</summary>
    public partial class GreeterClient : grpc::ClientBase<GreeterClient>
    {
      /// <summary>Creates a new client for Greeter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreeterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Greeter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreeterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcService.PntInfoResponce GetPatientInfoByPntID(global::GrpcService.PntInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPatientInfoByPntID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcService.PntInfoResponce GetPatientInfoByPntID(global::GrpcService.PntInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPatientInfoByPntID, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcService.PntInfoResponce> GetPatientInfoByPntIDAsync(global::GrpcService.PntInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPatientInfoByPntIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcService.PntInfoResponce> GetPatientInfoByPntIDAsync(global::GrpcService.PntInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPatientInfoByPntID, null, options, request);
      }
      public virtual global::GrpcService.PntInfoResponce GetPatientInfoByPntName(global::GrpcService.Pntname request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPatientInfoByPntName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcService.PntInfoResponce GetPatientInfoByPntName(global::GrpcService.Pntname request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPatientInfoByPntName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.PntInfoResponce> GetPatientInfoByPntNameAsync(global::GrpcService.Pntname request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPatientInfoByPntNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.PntInfoResponce> GetPatientInfoByPntNameAsync(global::GrpcService.Pntname request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPatientInfoByPntName, null, options, request);
      }
      public virtual global::GrpcService.SaveCheck SavePatientInfo(global::GrpcService.PntInfoResponce request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SavePatientInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcService.SaveCheck SavePatientInfo(global::GrpcService.PntInfoResponce request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SavePatientInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.SaveCheck> SavePatientInfoAsync(global::GrpcService.PntInfoResponce request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SavePatientInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.SaveCheck> SavePatientInfoAsync(global::GrpcService.PntInfoResponce request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SavePatientInfo, null, options, request);
      }
      public virtual global::GrpcService.UpdateCheck UpdatePatientInfo(global::GrpcService.PntInfoResponce request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePatientInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcService.UpdateCheck UpdatePatientInfo(global::GrpcService.PntInfoResponce request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePatientInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.UpdateCheck> UpdatePatientInfoAsync(global::GrpcService.PntInfoResponce request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePatientInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.UpdateCheck> UpdatePatientInfoAsync(global::GrpcService.PntInfoResponce request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePatientInfo, null, options, request);
      }
      public virtual global::GrpcService.DeleteCheck DeletePatientInfo(global::GrpcService.PntInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePatientInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcService.DeleteCheck DeletePatientInfo(global::GrpcService.PntInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePatientInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.DeleteCheck> DeletePatientInfoAsync(global::GrpcService.PntInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePatientInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcService.DeleteCheck> DeletePatientInfoAsync(global::GrpcService.PntInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePatientInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreeterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPatientInfoByPntID, serviceImpl.GetPatientInfoByPntID)
          .AddMethod(__Method_GetPatientInfoByPntName, serviceImpl.GetPatientInfoByPntName)
          .AddMethod(__Method_SavePatientInfo, serviceImpl.SavePatientInfo)
          .AddMethod(__Method_UpdatePatientInfo, serviceImpl.UpdatePatientInfo)
          .AddMethod(__Method_DeletePatientInfo, serviceImpl.DeletePatientInfo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetPatientInfoByPntID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcService.PntInfoRequest, global::GrpcService.PntInfoResponce>(serviceImpl.GetPatientInfoByPntID));
      serviceBinder.AddMethod(__Method_GetPatientInfoByPntName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcService.Pntname, global::GrpcService.PntInfoResponce>(serviceImpl.GetPatientInfoByPntName));
      serviceBinder.AddMethod(__Method_SavePatientInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcService.PntInfoResponce, global::GrpcService.SaveCheck>(serviceImpl.SavePatientInfo));
      serviceBinder.AddMethod(__Method_UpdatePatientInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcService.PntInfoResponce, global::GrpcService.UpdateCheck>(serviceImpl.UpdatePatientInfo));
      serviceBinder.AddMethod(__Method_DeletePatientInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcService.PntInfoRequest, global::GrpcService.DeleteCheck>(serviceImpl.DeletePatientInfo));
    }

  }
}
#endregion
